version: '3.9'

services:
    frontend:
        image: frontend:0.1.0
        container_name: frontend
        build:
            context: .
            dockerfile: Dockerfile.frontend
        ports:
            - '3000:3000'
            - '5555:5555' # for Prisma Studio if running
        environment:
            - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/frontend?schema=public
            - GRPC_DOMAIN=service_jobs
            - AUTH_SECRET=oRVQGb1cDGLdbhXrP1DT0Kqym81MYl5WfOKibjtTtxGP62h+Ot1NA+3eX8VUPIH0h4+O65dhnm79hF7k5kjQhQ==
            - NEXTAUTH_URL=http://localhost:3000
            - AUTH_TRUST_HOST=true
        networks:
            - scanner
        depends_on:
            - service_jobs

    service_jobs:
        image: service-jobs:0.1.0
        container_name: service-jobs_manager
        build:
            context: .
            dockerfile: Dockerfile.node-service
            args:
                SERVICE_DIR: service-jobs
                GENERATE_PRISMA: true
                INSTALL_IMAGE_MAGICK_TOOLS: true
        ports:
            - '5042:5042' # gRPC
            - '4042:4042' # SSE
            - '6666:5555' # for Prisma Studio if running (on :6666)
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBIT_MQ_SERVICE_QUEUE_NAME=JobManager
            - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/scanner-jobs?schema=public
            - SSE_URL=https://service_jobs:4042/events
        volumes:
            - ./service-jobs/sources:/app/sources # use this line to mount drives or folders to scan for source images
        networks:
            - scanner
        depends_on:
            - rabbitmq
            - postgres

    service_exif:
        image: service-exif:0.1.0
        container_name: service-exif_extractor
        build:
            context: .
            dockerfile: Dockerfile.node-service
            args:
                SERVICE_DIR: service-exif
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBIT_MQ_SERVICE_QUEUE_NAME=ExifExtractor
            - GRPC_JOB_MANAGER_HOST=service_jobs
        networks:
            - scanner
        depends_on:
            - rabbitmq
            - service_jobs

    service_faces:
        image: service-faces:0.1.0
        container_name: service-detect_faces
        build:
            context: .
            dockerfile: Dockerfile.python-service
            args:
                SERVICE_DIR: service-faces
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBIT_MQ_SERVICE_QUEUE_NAME=Faces
            - GRPC_JOB_MANAGER_HOST=service_jobs
        networks:
            - scanner
        depends_on:
            - rabbitmq
            - service_jobs

    service_classify:
        image: service-classify:0.1.0
        container_name: service-classify_image
        build:
            context: .
            dockerfile: Dockerfile.classify
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBIT_MQ_SERVICE_QUEUE_NAME=Classifier
            - GRPC_JOB_MANAGER_HOST=service_jobs
        networks:
            - scanner
        depends_on:
            - rabbitmq
            - service_jobs

    postgres:
        image: postgres:16-alpine
        container_name: postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            # TZ: "UTC"  # Uncomment to set container timezone
        volumes:
            - app_data:/var/lib/postgresql/data
        ports:
            - '5432:5432'
        # Healthâ€‘check so Docker Compose can wait for Postgres to be ready.
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - scanner

    rabbitmq:
        image: rabbitmq:3.12-management
        container_name: rabbitmq
        ports:
            - '5672:5672' # AMQP protocol
            - '15672:15672' # Management UI
        environment:
            RABBITMQ_DEFAULT_USER: admin # for dev only!
            RABBITMQ_DEFAULT_PASS: secret
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - scanner

networks:
    scanner:
        driver: bridge

volumes:
    app_data:
    rabbitmq_data:
